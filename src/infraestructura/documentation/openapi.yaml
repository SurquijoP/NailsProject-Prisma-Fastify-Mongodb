openapi: 3.0.3
info:
  title: MarialecNails Appointment - OpenAPI 3.0
  description: |-
    This is a Nails Appointment API Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    Some useful links:
    - [The MarialecNails Appointment API repository](https://github.com/omarerodriguez/NailsProject-Prisma-Fastify-Mongodb)
    - [Our Social Media Service ](https://www.instagram.com/nailsmarialec/)
  contact:
    email: apiteam@swagger.io
  version: 1.0.11
externalDocs:
  description: Find out more about this services
  url: https://www.instagram.com/nailsmarialec/
servers:
  - url: https://nailsmarialec-api.onrender.com
tags:
  - name: users
    description: Everything about your Users
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: nails types
    description: Everything about the nails types available
    externalDocs:
      description: Find out more about our store
      url: https://www.instagram.com/nailsmarialec/
  - name: nailstypes
    description: Operations about user
paths:
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /users:
    post:
      tags:
        - users
      summary: Add a new user to the API
      description: Add a new user to the API
      operationId: addUser
      requestBody:
        description: Create a new user in the API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
      security:
        - token:
            - token:tken
  /users/{userId}:
    put:
      tags:
        - users
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: User id to update
          required: true
          schema:
            type: string
            format: id
      requestBody:
        description: Update an existent user in the API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - token:
            - token:token
  /users/{id}:
    delete:
      tags:
        - users
      summary: Delete a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: token
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
            format: id
      responses:
        '400':
          description: Invalid user value
      security:
        - token:
            - token:token
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Create a new user in the API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '400':
          description: Invalid input
      security:
        - token:
            - token:token
  /users/:
    get:
      tags:
        - users
      summary: Get user by email
      description: ''
      operationId: getUserByName
      parameters:
        - in: query
          name: email
          description: 'The email that needs to be fetched. '
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid email supplied
        '404':
          description: User not found

components:
  schemas:
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: user@gamil.com
        phone_number:
          type: string
          example: 3159456014
    User:
      type: object
      properties:
        name:
          type: string
          example: theUser
        last_name:
          type: string
          example: lastName_user
        age:
          type: integer
          example: 20
        phone_number:
          type: string
          example: '3159456014'
        district:
          type: string
          example: 'las delicias'
        gender:
          type: string
          example: 'female'
        email:
          type: string
          example: user@gmail.com
      xml:
        name: user
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    token:
      type: apiKey
      name: token
      in: header